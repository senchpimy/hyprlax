name: Release

on:
  push:
    tags:
      # Only match stable version tags (no dash)
      # v1.0.0, v2.1.3 etc. (NOT v1.0.0-beta.1)
      - 'v[0-9]+.[0-9]+.[0-9]+' 

permissions:
  contents: write

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate tag is from master
        run: |
          # Get the branch containing this tag
          BRANCH=$(git branch -r --contains ${{ github.ref_name }} | grep -v HEAD | head -1 | sed 's/.*origin\///')
          echo "Stable release tag ${{ github.ref_name }} is on branch: $BRANCH"
          
          # Stable releases must be from master branch
          if [[ "$BRANCH" != "master" ]] && [[ "$BRANCH" != "main" ]]; then
            echo "::error::Stable release tags must be created from master/main branch!"
            echo "Current branch is: $BRANCH"
            echo "For pre-releases from feature branches, use version tags like v1.0.0-beta.1"
            exit 1
          fi
          
          echo "‚úÖ Stable release tag is correctly on master/main branch"

  build:
    needs: validate-branch
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            cc: gcc

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwayland-dev \
          wayland-protocols \
          libegl1-mesa-dev \
          libgles2-mesa-dev \
          pkg-config \
          make

    - name: Write VERSION file from tag
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION="${GITHUB_REF_NAME#v}"
        echo "$VERSION" > VERSION
        echo "Building version: $VERSION"

    - name: Build
      env:
        CC: ${{ matrix.cc }}
      run: |
        make clean
        make
        
    - name: Create binary names
      id: binary
      run: |
        echo "hyprlax_name=hyprlax-${{ matrix.arch }}" >> $GITHUB_OUTPUT

    - name: Rename binary
      run: |
        mv hyprlax ${{ steps.binary.outputs.hyprlax_name }}
        chmod +x ${{ steps.binary.outputs.hyprlax_name }}

    - name: Upload hyprlax artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.binary.outputs.hyprlax_name }}
        path: ${{ steps.binary.outputs.hyprlax_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./binaries

    - name: Prepare release files
      run: |
        # Move all binaries to root
        find ./binaries -type f -name 'hyprlax-*' -exec mv {} . \;
        
        # Check if we have the x86_64 binary
        if [ ! -f hyprlax-x86_64 ]; then
          echo "Error: hyprlax-x86_64 binary not found!"
          exit 1
        fi
        
        # Create checksums
        sha256sum hyprlax-* > SHA256SUMS
        
        # List files for verification
        ls -la hyprlax-* SHA256SUMS

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: notes
      run: |
        # Get all tags sorted by version
        git fetch --tags
        
        # Get the previous release tag (excluding pre-releases and current tag)
        PREV_TAG=$(git tag -l 'v*' | grep -v '-' | grep -v "^${GITHUB_REF_NAME}$" | sort -V | tail -1)
        
        if [ -z "$PREV_TAG" ]; then
          echo "First stable release - no previous stable version found"
          # Get last 30 commits for initial release
          COMMITS=$(git log HEAD~30..HEAD --pretty=format:"%h %s" 2>/dev/null || git log --pretty=format:"%h %s" | head -30)
        else
          echo "Previous stable release: $PREV_TAG"
          # Get commits since last stable tag
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"%h %s")
        fi
        
        # Process commits to extract PRs and categorize
        FEATURES=""
        FIXES=""
        DOCS=""
        OTHER=""
        
        while IFS= read -r line; do
          if [[ "$line" == *"feat"* ]] || [[ "$line" == *"feature"* ]] || [[ "$line" == *"add"* ]]; then
            FEATURES="${FEATURES}- ${line}\n"
          elif [[ "$line" == *"fix"* ]] || [[ "$line" == *"bug"* ]]; then
            FIXES="${FIXES}- ${line}\n"
          elif [[ "$line" == *"doc"* ]] || [[ "$line" == *"readme"* ]]; then
            DOCS="${DOCS}- ${line}\n"
          else
            OTHER="${OTHER}- ${line}\n"
          fi
        done <<< "$COMMITS"
        
        # Build categorized notes
        NOTES=""
        if [ -n "$FEATURES" ]; then
          NOTES="${NOTES}### ‚ú® New Features\n${FEATURES}\n"
        fi
        if [ -n "$FIXES" ]; then
          NOTES="${NOTES}### üêõ Bug Fixes\n${FIXES}\n"
        fi
        if [ -n "$DOCS" ]; then
          NOTES="${NOTES}### üìö Documentation\n${DOCS}\n"
        fi
        if [ -n "$OTHER" ]; then
          NOTES="${NOTES}### üîß Other Changes\n${OTHER}\n"
        fi
        
        # If no categorized commits, show all commits
        if [ -z "$NOTES" ]; then
          NOTES=$(echo "$COMMITS" | sed 's/^/- /')
        fi
        
        # Format the notes with proper escaping
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo -e "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Also save the previous tag for the release body
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ steps.version.outputs.version }}
        body: |
          ## hyprlax ${{ steps.version.outputs.version }}
          
          Multi-compositor parallax wallpaper engine for Linux.
          ${{ steps.notes.outputs.prev_tag && format('**Changes since {0}**', steps.notes.outputs.prev_tag) || '**Initial stable release**' }}
          
          ### üì¶ Installation
          
          **Download the binary:**
          - `hyprlax-x86_64` - hyprlax binary for x86_64 systems (control interface integrated)
          
          ```bash
          # Download binary
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/hyprlax-x86_64
          
          # Make executable and install
          chmod +x hyprlax-x86_64
          sudo mv hyprlax-x86_64 /usr/local/bin/hyprlax
          ```
          
          **Note:** The control interface is now integrated. Use `hyprlax ctl <command>` for runtime control.
          
          For ARM64 and other architectures, please build from source.
          
          ---
          
          ## What's Changed
          
          ${{ steps.notes.outputs.notes }}
          
          ---
          
          ### üîê Checksums
          
          Verify your download with the SHA256SUMS file included in the release assets.
          
        files: |
          hyprlax-x86_64
          SHA256SUMS
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}